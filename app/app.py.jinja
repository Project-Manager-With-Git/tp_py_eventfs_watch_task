import os
import time
from pathlib import Path
from schema_entry import EntryPoint
from pyloggerhelper import log
from watchdog.observers import Observer
# from watchdog.observers.polling import PollingObserver as Observer # 如果在docker中部署可以用PollingObserver
from event_handdler import EventHanddler


class Application(EntryPoint):
    _name = "{{ app_name }}"
    schema = {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "type": "object",
        "required": ["app_version", "app_name", "log_level", "watch_path"],
        "properties": {
            "app_version": {
                "type": "string",
                "title": "v",
                "description": "应用版本",
                "default": "0.0.0"
            },
            "app_name": {
                "type": "string",
                "title": "n",
                "description": "应用名",
                "default": "{{ app_name }}"
            },
            "log_level": {
                "type": "string",
                "title": "l",
                "description": "log等级",
                "enum": ["DEBUG", "INFO", "WARN", "ERROR"],
                "default": "DEBUG"
            },
            "watch_path": {
                "type": "string",
                "description": "监听的目标路径",
                "default": "/data"
            }
        }
    }

    def do_main(self) -> None:
        log.initialize_for_app(
            app_name=self.config.get("app_name"),
            log_level=self.config.get("log_level")
        )
        log.info("获取任务配置", config=self.config)
        observer = Observer()
        handler = EventHanddler()
        observer.schedule(handler, self.config["watch_path"], recursive=True)
        log.info('FSEvent Watching, Press Ctrl+{0} to exit'.format('Break' if os.name == 'nt' else 'C'))
        observer.start()
        try:
            while True:
                time.sleep(1)
        except (KeyboardInterrupt, SystemExit):
            log.info('crontab task stoped')
        except Exception as e:
            log.error("crontab task get error", err=type(e), err_msg=str(e), exc_info=True, stack_info=True)
        finally:
            observer.stop()
            observer.join()
